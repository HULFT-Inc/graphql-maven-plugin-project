/** Generated by the default template from graphql-java-generator */
package ${packageUtilName};

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
import static graphql.schema.idl.TypeRuntimeWiring.newTypeWiring;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.concurrent.CompletableFuture;

import javax.annotation.PostConstruct;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.dataloader.DataLoader;
import org.dataloader.DataLoaderRegistry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.context.request.WebRequest;

import graphql.ExecutionInput;
import graphql.ExecutionResult;
import graphql.GraphQL;
import graphql.TypeResolutionEnvironment;
import graphql.language.FieldDefinition;
import graphql.language.InterfaceTypeDefinition;
import graphql.language.ObjectTypeDefinition;
import graphql.language.Type;
import graphql.language.TypeName;
import graphql.schema.GraphQLObjectType;
import graphql.schema.GraphQLSchema;
import graphql.schema.TypeResolver;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;
import graphql.spring.web.servlet.ExecutionInputCustomizer;
import graphql.spring.web.servlet.GraphQLInvocation;
import graphql.spring.web.servlet.GraphQLInvocationData;
import graphql.spring.web.servlet.components.DefaultGraphQLInvocation;

#if($configuration.generateBatchLoaderEnvironment)
import com.graphql_java_generator.server.util.BatchLoaderDelegateWithContext;
#else
import com.graphql_java_generator.server.util.BatchLoaderDelegate;
#end

#foreach($import in $imports)
import $import;
#end

/**
 * This class is responsible for providing all the GraphQL Beans to the graphql-java Spring Boot integration.
 * <BR/><BR/>
 * Based on the https://www.graphql-java.com/tutorials/getting-started-with-spring-boot/ tutorial
 * 
 * @author etienne-sf
 */
@Component
public class GraphQLProvider {

	/** The logger for this instance */
	protected Logger logger = LoggerFactory.getLogger(GraphQLProvider.class);

	@Autowired
	ApplicationContext applicationContext;

	@Autowired
	GraphQLDataFetchers graphQLDataFetchers;

	private GraphQLSchema graphQLSchema;
	private GraphQL graphQL;
	
	@PostConstruct
	public void init() throws IOException {
		Resource res;
		StringBuffer sdl = new StringBuffer();
#if($configuration.addRelayConnections)
## When addRelayConnections is true, then graphql-java should use the Generated schema, instead of the source schema
		res = new ClassPathResource("/${configuration.defaultTargetSchemaFileName}");
		try(Reader reader = new InputStreamReader(res.getInputStream(), Charset.forName("UTF8"))) {
			sdl.append(FileCopyUtils.copyToString(reader));
		}
#else
#foreach ($schemaFile in $schemaFiles)
		res = new ClassPathResource("/${schemaFile}");
		try(Reader reader = new InputStreamReader(res.getInputStream(), Charset.forName("UTF8"))) {
			sdl.append(FileCopyUtils.copyToString(reader));
		}
#end
#end
		this.graphQL = GraphQL.newGraphQL(buildSchema(sdl.toString())).build();
	}

	@Bean
	public GraphQL graphQL() {
		return graphQL;
	}

	/**
	 * This method returns a clone of the {@link DefaultGraphQLInvocation}, with a Data Loader being created for each request. This insure a "per request" {@link DataLoaderRegistry}
	 * @param executionInputCustomizer
	 * @return
	 */
	@Bean
	@Primary
	GraphQLInvocation customGraphQLInvocation(ExecutionInputCustomizer executionInputCustomizer) {
		return new GraphQLInvocation() {

			@Override
			public CompletableFuture<ExecutionResult> invoke(GraphQLInvocationData invocationData,
					WebRequest webRequest) {
				ExecutionInput.Builder executionInputBuilder = ExecutionInput.newExecutionInput()
						.query(invocationData.getQuery()).operationName(invocationData.getOperationName())
						.variables(invocationData.getVariables());

				DataLoaderRegistry registry = new DataLoaderRegistry();
				DataLoader<Object, Object> dl;

#if($configuration.generateBatchLoaderEnvironment)
				for (BatchLoaderDelegateWithContext<?, ?> batchLoaderDelegate : applicationContext
						.getBeansOfType(BatchLoaderDelegateWithContext.class).values()) {
#else
				for (BatchLoaderDelegate<?, ?> batchLoaderDelegate : applicationContext
						.getBeansOfType(BatchLoaderDelegate.class).values()) {
#end
					registry.register(batchLoaderDelegate.getName(), DataLoader.newDataLoader(batchLoaderDelegate));
				}
				executionInputBuilder.dataLoaderRegistry(registry);

				ExecutionInput executionInput = executionInputBuilder.build();
				CompletableFuture<ExecutionInput> customizedExecutionInput = executionInputCustomizer
						.customizeExecutionInput(executionInput, webRequest);
				return customizedExecutionInput.thenCompose(graphQL::executeAsync);
			}

		};
	}

	private GraphQLSchema buildSchema(String sdl) {
		TypeDefinitionRegistry typeRegistry = new SchemaParser().parse(sdl);

		RuntimeWiring runtimeWiring = buildWiring();
		SchemaGenerator schemaGenerator = new SchemaGenerator();
		graphQLSchema = schemaGenerator.makeExecutableSchema(typeRegistry, runtimeWiring);
		return graphQLSchema;
	}
	
	public GraphQLSchema getGraphQLSchema() {
		return graphQLSchema;
	}

	private RuntimeWiring buildWiring() {
		// Thanks to this thread :
		// https:// stackoverflow.com/questions/54251935/graphql-no-resolver-definied-for-interface-union-java
		//
		// Also see sample :
		// https://github.com/graphql-java/graphql-java-examples/tree/master/http-example
		return RuntimeWiring.newRuntimeWiring()
#foreach ($customScalar in $customScalars)
#if (${customScalar.customScalarDefinition.graphQLScalarTypeClass})
			.scalar(new ${customScalar.customScalarDefinition.graphQLScalarTypeClass}())
#elseif (${customScalar.customScalarDefinition.graphQLScalarTypeStaticField})
			.scalar(${customScalar.customScalarDefinition.graphQLScalarTypeStaticField})
#elseif (${customScalar.customScalarDefinition.graphQLScalarTypeGetter})
			.scalar(${customScalar.customScalarDefinition.graphQLScalarTypeGetter})
#else
		.scalar(): ${customScalar.javaName} : you must define one of graphQLScalarTypeClass, graphQLScalarTypeStaticField or graphQLScalarTypeGetter (in the POM parameters for CustomScalars)
#end
#end
#foreach ($dataFetchersDelegate in $dataFetchersDelegates)
			// Data fetchers for ${dataFetchersDelegate.name}
#foreach ($dataFetcher in $dataFetchersDelegate.dataFetchers)
			.type(newTypeWiring("${dataFetcher.field.owningType.javaName}").dataFetcher("${dataFetcher.field.javaName}", graphQLDataFetchers.${dataFetchersDelegate.camelCaseName}${dataFetcher.pascalCaseName}#if(${dataFetcher.completableFuture})WithDataLoader#end()))
#end
#end
#if ($interfaces.size() > 0)
			//
			// Let's link the interface types to the concrete types
#end
#foreach ($interface in $interfaces)
			.type("${interface.javaName}", typeWiring -> typeWiring.typeResolver(get${interface.javaName}Resolver()))
#end
#if ($unions.size() > 0)
			//
			// Let's link the interface types to the concrete types
#end
#foreach ($union in $unions)
			.type("${union.javaName}", typeWiring -> typeWiring.typeResolver(get${union.javaName}Resolver()))
#end
			.build();
	}

#foreach ($interface in $interfaces)
	private TypeResolver get${interface.javaName}Resolver() {
		return new TypeResolver() {
			@Override
			public GraphQLObjectType getType(TypeResolutionEnvironment env) {
#if ($interface.implementingTypes.size() == 0)
## No implementing type.
				return null;
#else
				Object javaObject = env.getObject();
				String ret = null;
#foreach ($implementingType in ${interface.implementingTypes})
				if (javaObject instanceof ${implementingType.javaName}) {
					ret = "${implementingType.javaName}";
				} else
#end
				{
					throw new RuntimeException("Can't resolve javaObject " + javaObject.getClass().getName());
				}
				logger.trace("Resolved type for javaObject {} is {}", javaObject.getClass().getName());
				return env.getSchema().getObjectType(ret);
#end
			}
		};
	}

#end
#foreach ($union in $unions)
private TypeResolver get${union.javaName}Resolver() {
	return new TypeResolver() {
		@Override
		public GraphQLObjectType getType(TypeResolutionEnvironment env) {
			Object javaObject = env.getObject();
			String ret = null;

#foreach ($memberType in ${union.memberTypes})
			if (javaObject instanceof ${memberType.javaName}) {
				ret = "${memberType.javaName}";
			} else
#end
			{
				throw new RuntimeException("Can't resolve javaObject " + javaObject.getClass().getName());
			}
			logger.trace("Resolved type for javaObject {} is {}", javaObject.getClass().getName());
			return env.getSchema().getObjectType(ret);
		}
	};
}

#end
}
