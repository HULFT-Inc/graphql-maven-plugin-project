/** Generated by the default template from graphql-java-generator */
package ${packageUtilName};

import com.graphql_java_generator.client.directive.Directive;
import com.graphql_java_generator.client.directive.DirectiveLocation;
import com.graphql_java_generator.client.directive.DirectiveRegistry;
import com.graphql_java_generator.client.directive.DirectiveRegistryImpl;
import com.graphql_java_generator.client.request.InputParameter;
import com.graphql_java_generator.client.request.InputParameter.InputParameterType;
import com.graphql_java_generator.customscalars.CustomScalarRegistryImpl;

public class DirectiveRegistryInitializer {
	
	/**
	 * Initialization of the {@link DirectiveRegistry} with all known custom scalars, that is with all custom scalars
	 * defined in the project pom
	 */
	public static DirectiveRegistry initDirectiveRegistry() {
		DirectiveRegistry directiveRegistry = new DirectiveRegistryImpl();
		Directive directive;
		InputParameter param;

#foreach ($directive in $directives)
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		// Creating Directive ${directive.name}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		directive = new Directive();
		directive.setName("${directive.name}");
		directive.setPackageName("${packageUtilName}");
#foreach ($argument in $directive.arguments)
		param = InputParameter.newHardCodedParameter("${argument.name}", null,
#if ($argument.graphQLTypeSimpleName == "BigDecimal" || 
	$argument.graphQLTypeSimpleName == "BigInteger" || 
	$argument.graphQLTypeSimpleName == "Boolean" || 
	$argument.graphQLTypeSimpleName == "Byte" || 
	$argument.graphQLTypeSimpleName == "Char" || 
	$argument.graphQLTypeSimpleName == "Float" || 
	$argument.graphQLTypeSimpleName == "ID" || 
	$argument.graphQLTypeSimpleName == "Int" || 
	$argument.graphQLTypeSimpleName == "Long" || 
	$argument.graphQLTypeSimpleName == "Short" || 
	$argument.graphQLTypeSimpleName == "String"
	)
					graphql.Scalars.GraphQL${argument.graphQLTypeSimpleName}
#else
## It must be a custom scalar
					CustomScalarRegistryImpl.customScalarRegistry.getGraphQLScalarType("${argument.graphQLTypeSimpleName}")
#end
					, ${argument.fieldTypeAST.mandatory}, ${argument.fieldTypeAST.list}, ${argument.fieldTypeAST.itemMandatory}
				);
		directive.getArguments().add(param);
#end
#foreach ($location in $directive.directiveLocations)
		directive.getDirectiveLocations().add(DirectiveLocation.${location.name()});
#end
		directiveRegistry.registerDirective(directive);

#end

		DirectiveRegistryImpl.directiveRegistry = directiveRegistry;
		return directiveRegistry;
	}

}
