<!-- GraphQL Maven Plugin (Code templates customization) -->

<!--ts-->
   * [Customizing code templates](#customizing-code-templates)
   * [templates param usage](#templates-param-usage)
      * [Provide the custom template as a file within the current project](#provide-the-custom-template-as-a-file-within-the-current-project)
      * [Provide the custom template within a provided jar](#provide-the-custom-template-within-a-provided-jar)
   * [Template IDs](#template-ids)
   * [Examples](#examples)

<!-- Added by: runner, at: Thu Mar 18 20:36:52 UTC 2021 -->

<!--te-->

# Customizing code templates

Code generated by the Graphql Maven Plugin is generated applying a set of [Velocity templates](http://velocity.apache.org) to the input GraphQL Schmea. Templates are located in the project at [graphql-maven-plugin-logic/src/main/resources/templates](https://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates)

If for any reason you may need to customize the template to modify the generated code, this can be done by using the plugin parameter __templates__. You can then provide your own templates. There are two possibilities for that:
* By putting them in a _jar_, that will be added as a dependency for the _graphql-maven-plugin_.
    * This can be nice, if you plan to reuse these templates in several projects.
* (since v1.13) By putting them in your current project or module, and give a reference to it

You can combine both styles in one pom or gradle.build file.


# templates param usage

## Provide the custom template as a file within the current project

To do this, you provide the path of the file, relative to the project or module root. You can check this sample:

```
<project ...>
...

<build>
	<plugins>
...
		<plugin>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-maven-plugin</artifactId>
			<version>${lastReleasedVersion}</version>

			<executions>
				<execution>
					<goals>
						<goal>graphql</goal>
					</goals>
				</execution>
			</executions>
			<configuration>
				<mode>client</mode>
				<templates>
					<!-- The SUBSCRIPTION_EXECUTOR is found in this project, int the src/graphql/customtemplates folder -->
					<SUBSCRIPTION_EXECUTOR>src/graphql/customtemplates/custom_client_subscription_executor.vm.java</SUBSCRIPTION_EXECUTOR>
				</templates>
			</configuration>
		</plugin>
	</plugins>
</build>
...
</project>
```

## Provide the custom template within a provided jar

Here there's an example of plugin configuration to use customized templates

```
<project ...>
...

<build>
	<plugins>
...
		<plugin>
			<groupId>com.graphql-java-generator</groupId>
			<artifactId>graphql-maven-plugin</artifactId>
			<version>${lastReleasedVersion}</version>

			<executions>
				<execution>
					<goals>
						<goal>graphql</goal>
					</goals>
				</execution>
			</executions>
			<configuration>
				<mode>client</mode>
				<templates>
					<!-- The QUERY_MUTATION is found in the dependency, added just below WITHIN the plugin definition -->
					<QUERY_MUTATION>classpath/entry/to/customtemplate.java.vm</QUERY_MUTATION>
				</templates>
			</configuration>
			<dependencies>

				<!-- Dependency containing your templates-->
				<dependency>
					<groupId>...</groupId>
					<artifactId>...</artifactId>
					<version>...</version>
				</dependency>

			</dependencies>
		</plugin>
	</plugins>
</build>
...
</project>
```


The __templates__ param is a map where the key is the ID of the template to customize and the value is a classpath entry to the resources containing the customized template. 

Customize templates shall be provided in a dependency configured in the plugin.

Both client and server templates can be customized.


# Template IDs

The available template IDs that can be configured for customization are:

| OBJECT | COMMON | [templates/object_type.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/object_type.vm.java) |
| INTERFACE | COMMON | [templates/interface_type.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/interface_type.vm.java) |
| ENUM | COMMON | [templates/enum_type.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/enum_type.vm.java) |
| UNION | COMMON | [templates/union_type.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/union_type.vm.java) |
| CUSTOM_SCALAR_REGISTRY_INITIALIZER | CLIENT | [templates/client_CustomScalarRegistryInitializer.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/client_CustomScalarRegistryInitializer.vm.java) |
| QUERY_MUTATION | CLIENT | [templates/client_query_mutation_type.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/client_query_mutation_type.vm.java) |
| QUERY_TARGET_TYPE | CLIENT | [templates/client_query_target_type.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/client_query_target_type.vm.java) |
| JACKSON_DESERIALIZER | CLIENT | [templates/client_jackson_deserialize.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/client_jackson_deserialize.vm.java) |
| SUBSCRIPTION | CLIENT | [templates/client_subscription_type.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/client_subscription_type.vm.java) |
| DATA_FETCHER | SERVER | [templates/server_GraphQLDataFetchers.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/server_GraphQLDataFetchers.vm.java) |
| BATCH_LOADER_DELEGATE_IMPL | SERVER | [templates/server_BatchLoaderDelegateImpl.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/server_BatchLoaderDelegateImpl.vm.java) |
| DATA_FETCHER_DELEGATE | SERVER | [templates/server_GraphQLDataFetchersDelegate.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/server_GraphQLDataFetchersDelegate.vm.java |
| GRAPHQLUTIL | SERVER | [templates/server_GraphQLUtil.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/server_GraphQLUtil.vm.java) |
| SERVER | SERVER | [templates/server_GraphQLServerMain.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/server_GraphQLServerMain.vm.java) |
| WEB_SOCKET_CONFIG | SERVER | [templates/server_WebSocketConfig.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/server_WebSocketConfig.vm.java) |
| WEB_SOCKET_HANDLER | SERVER | [templates/server_WebSocketHandler.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/server_WebSocketHandler.vm.java) |
| WIRING | SERVER | [templates/server_GraphQLWiring.vm.java](http://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/main/resources/templates/server_GraphQLWiring.vm.java) |


#  Examples

Available on the project there is an example of this behavior:
* [graphql-maven-plugin-samples-customtemplates-resttemplate](https://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-samples/graphql-maven-plugin-samples-CustomTemplates-resttemplate): contains an example of a template customization for QUERY_MUTATION_SUBSCRIPTION template. Code generated uses a Spring implementation of [com.graphql_java_generator.client.QueryExecutor](https://github.com/graphql-java-generator/graphql-maven-plugin-project/blob/master/graphql-java-runtime/src/main/java/com/graphql_java_generator/client/QueryExecutor.java) that uses RestTemplate as the client
* [graphql-maven-plugin-samples-customtemplates-client](https://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-samples/graphql-maven-plugin-samples-CustomTemplates-client): a Spring-based client generated with the previous customized template.
