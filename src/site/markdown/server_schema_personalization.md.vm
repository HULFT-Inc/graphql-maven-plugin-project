# Schema Personalization (for server mode)

## Presentation

The generated code embeds Java annotations that should suit most of your needs. But you can have special needs.

The current version is stable. But we need your feedback to improve it, according to your needs.

With the schema personalization, you can:

* Personalize the generated POJOs (below named 'entities' as they are JPA entities):
    * Add one or more annotations, to the annotations generated by the plugin
    * Replace all the annotations generated by the plugin, by the annotations you provide (which can actually be empty, thus removing all annotations from this java class)
    * Add one or more fields
* Personalize the attribute:
    * Define the attribute java type
    * Define whether a field is an id or not (which will trigger the @Id and @GeneratedValue annotation)
    * Define whether this field is a list or not (if true the attribute is a list of the give type, otherwise it's just an instance of this type)
    * Define if this field is mandatory or not
    * Add one or more annotations, to the annotations generated by the plugin
    * Replace all the annotations generated by the plugin, by the annotations you provide (which can actually be empty, thus removing all annotations from this field)

The __JSON schema__ for the schema personalization JSON is [available in git](https://github.com/graphql-java-generator/graphql-maven-plugin-project/blob/master/graphql-maven-plugin-logic/src/main/resources/schema_personalization.schema.json). This define the format that your configuration file must respect.

You'll find __samples files__ [in the test resources](https://github.com/graphql-java-generator/graphql-maven-plugin-project/tree/master/graphql-maven-plugin-logic/src/test/resources/schema_personalization) of the plugin project. Of course, the xxx\_KO\_xxx files are bad samples... ;-)

## Principle

Currently, the annotations used in the client mode can not be changed. These annotations are mainly Jackson's annotation to allow JSON serialization and deserialization of the POJO, to map with the GraphQL requests and responses.

So this applies only when in __server__ mode. In this case, the plugin generates classes and attribute annotations in this way:

* POJO: there is one POJO for each GraphQL object, including query, mutation and subscription.
    * Each POJO contains one attribute per GraphQL attribute in the GraphQL schema. The java attribute name is the GraphQL attribute name. The type is either: the java corresponding type for GraphQL scalars, or the generated POJO for GraphQL objects.
* Class annotation
    * One annotation is generated: _@javax.persistence.Entity_
* Attribute annotations. The same annotation is associated to the attribute, and the relevant getter and setter. These annotations are added, depending on the case:
    * If the attribute is an id (that is a field with the GraphQL type "ID"), the java type is _java.util.UUID_ and these annotations are generated:
        * _@javax.persistence.Id_
        _@javax.persistence.GeneratedValue_
    * If the attribute is a list (either of scalars or of GraphQL objects) or its type is a GraphQL object:
        * _@javax.persistence.Transient_
        This prevents JPA to fetch data, and let GraphQL manage the associations (very important for performance)

## How to configure the plugin

To configure the way the code is generated, you'll have to define a json file that respects the [personalization JSON schema](https://github.com/graphql-java-generator/graphql-maven-plugin-project/blob/master/graphql-maven-plugin-logic/src/main/resources/schema_personalization.schema.json).

Then you declare where to find this json file in the pom file, by using the __schemaPersonalizationFile__ tag:

```XML
<project ...>
...

	<build>
		<plugins>
...
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<version>${lastReleasedVersion}</version>
				<executions>
					<execution>
						<goals>
							<goal>graphql</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mode>client</mode>
					<packageName>my.target.package</packageName>
					<schemaPersonalizationFile>src/main/graphql/forum_personalization.json</schemaPersonalizationFile>
				</configuration>
			</plugin>
...
		</plugins>
	</build>
...
</project>
```

In this sample, the personalization file is stored in a dedicated folder, instead of the resource. It avoids to add this compile time file into the packed artefact. 

But you can keep this file in the resource file, if you want to avoid creating an additional folder, that perhaps you'll forget. That's up to you...



## Java class (Entity) personalization

You'll find below some samples of what's possible, and how to do it. Of course, you can mix all these possibilities in one json file. 

If you want to add an annotation to a generated Java POJO:

```JSON
{
	"entityPersonalizations": [
		{
			"name": "myEntity",
			"addAnnotation": "@my.annotation.package.Annotation"
		}
	]
}
```



If you want to set the annotation to a generated Java POJO, and replace all annotations coming from the plugin:

```JSON
{
	"entityPersonalizations": [
		{
			"name": "myEntity",
			"replaceAnnotation": "@my.annotation.package.MyAnnotation @my.annotation.package.MyOtherAnnotation",
		}
	]
}
```

If you want to add fields to an entity:


```JSON
{
	"entityPersonalizations": [
		{
			"name": "MyEntity",
			"newFields": [
				{
					"name": "field1.1",
					"type": "type1.1",
					"id": true,
					"list": true,
					"mandatory": true,
					"addAnnotation": "addAnnotation1.1",
					"replaceAnnotation": "replaceAnnotation1.1"
				},
				{
					"name": "field1.2",
					"type": "type1.2",
					"id": false,
					"list": false,
					"mandatory": false,
					"addAnnotation": "addAnnotation1.2",
					"replaceAnnotation": "replaceAnnotation1.2"
				}
			]
		}
	]
}
```

If you want to personalize some fields:

```JSON
{
	"entityPersonalizations": [
		{
			"name": "entity1",
			"fieldPersonalizations": [
				{
					"name": "field1.3",
					"type": "type1.3",
					"id": true,
					"list": true,
					"mandatory": true,
					"addAnnotation": "@my.annotation.package.Annotation1 @my.annotation.package.Annotation2",
					"replaceAnnotation": "replaceAnnotation1.3"
				},
				{
					"name": "field2",
					"replaceAnnotation": "@my.annotation.package.Annotation3 @my.annotation.package.Annotation4"
				}
			]
		}
	]
}
```
