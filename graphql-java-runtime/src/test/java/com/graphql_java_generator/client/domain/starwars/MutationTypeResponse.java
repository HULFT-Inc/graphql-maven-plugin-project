package com.graphql_java_generator.client.domain.starwars;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLQuery;
import com.graphql_java_generator.annotation.RequestType;
import com.graphql_java_generator.client.response.GraphQLRequestObject;

/**
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLQuery(name = "MutationTypeResponse", type = RequestType.mutation)
public class MutationTypeResponse implements GraphQLRequestObject {

	@GraphQLInputParameters(names = { "name", "homePlanet" }, types = { "String", "String" })
	@JsonProperty("createHuman")
	@GraphQLNonScalar(fieldName = "createHuman", graphQLTypeSimpleName = "Human", javaClass = Human.class)
	Human createHuman;

	@GraphQLInputParameters(names = { "idCharacter", "idNewFriend" }, types = { "String", "String" })
	@JsonProperty("addFriend")
	@GraphQLNonScalar(fieldName = "addFriend", graphQLTypeSimpleName = "Character", javaClass = Character.class)
	Character addFriend;

	public void setCreateHuman(Human createHuman) {
		this.createHuman = createHuman;
	}

	public Human getCreateHuman() {
		return createHuman;
	}

	public void setAddFriend(Character addFriend) {
		this.addFriend = addFriend;
	}

	public Character getAddFriend() {
		return addFriend;
	}

	@Override
	public String toString() {
		return "MutationType {" + "createHuman: " + createHuman + ", " + "addFriend: " + addFriend + "}";
	}

	/**
	 * Enum of field names
	 */
	public static enum Field implements GraphQLField {
		CreateHuman("createHuman"), AddFriend("addFriend");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		@Override
		public String getFieldName() {
			return fieldName;
		}

		@Override
		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder
	 */
	public static class Builder {
		private Human createHuman;
		private Character addFriend;

		public Builder withCreateHuman(Human createHuman) {
			this.createHuman = createHuman;
			return this;
		}

		public Builder withAddFriend(Character addFriend) {
			this.addFriend = addFriend;
			return this;
		}

		public MutationTypeResponse build() {
			MutationTypeResponse object = new MutationTypeResponse();
			object.setCreateHuman(createHuman);
			object.setAddFriend(addFriend);
			return object;
		}
	}

	@Override
	public void setExtensions(JsonNode extensions) {
		// TODO Auto-generated method stub

	}
}
